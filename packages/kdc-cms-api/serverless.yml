service: kdc-cms-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-plugin-monorepo
  - serverless-offline
  - serverless-stage-manager

custom:
  stages:
    - local
    - dev
    - staging
    - prod

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage}
  region: ${opt:region}
  profile: ${opt:profile}
  environment:
    DYNAMODB_TABLE: ${file(../../resources/database/serverless.yml):provider.environment.DYNAMODB_TABLE}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"

functions:
  cms:
    name: ${self:service}-${self:provider.stage}
    handler: lambda.handler
    memorySize: 128
    timeout: 5
    environment:
      NODE_ENV: production
      JWT_SECRET: Tosn3221as(SEjsd)
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}
    package:
      excludeDevDependencies: true
      exclude:
        - .nyc_output/**
        - build/**
        - test/**
    events:
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: any
          cors: true
      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: any
          cors: true

resources:
  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:provider.stage}-ApiGatewayRestApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:provider.stage}-ApiGatewayRestApiRootResourceId
