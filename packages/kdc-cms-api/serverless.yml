service: kdc-cms-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-plugin-monorepo
  - serverless-s3-local
  - serverless-offline
  - serverless-bundle
  - serverless-s3-remover

custom:
  remover:
    prompt: true
    buckets:
      - ${self:provider.environment.S3_UPLOAD}
  s3:
    port: 8104
    directory: ./.s3-local
    allowMismatchedSignatures: true
    cors: services/upload/cors.xml

package:
  individually: true

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 256
  timeout: 6
  stage: ${opt:stage}
  region: ${file(../../config.${self:provider.stage}.yml):REGION, 'localhost'}
  profile: ${file(../../config.${self:provider.stage}.yml):PROFILE, 'default'}
  environment:
    NODE_ENV: ${self:provider.stage}
    JWT_SECRET: ${file(../../config.${self:provider.stage}.yml):JWT_SECRET}
    DDB_TABLE: database-${self:provider.stage}.${file(../../config.${self:provider.stage}.yml):ROOT_DOMAIN}
    DDB_REGION: ${self:provider.region}
    S3_REGION: ${self:provider.region}
    S3_UPLOAD: ${file(../../config.${self:provider.stage}.yml):UPLOAD_BUCKET}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DDB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DDB_TABLE}/index/*"
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:provider.environment.S3_UPLOAD}/*"

functions:
  - ${file(services/users/serverless.yml)}
  - ${file(services/define/pages/serverless.yml)}
  - ${file(services/pages/serverless.yml)}
  - ${file(services/define/contents/serverless.yml)}
  - ${file(services/contents/serverless.yml)}
  - ${file(services/upload/serverless.yml)}
  - ${file(services/seed/serverless.yml)}

resources:
  Resources:
    S3BucketUploads:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_UPLOAD}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
              AllowedOrigins:
                - "*"
              ExposedHeaders:
                - ETag

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:provider.stage}-ApiGatewayRestApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:provider.stage}-ApiGatewayRestApiRootResourceId
